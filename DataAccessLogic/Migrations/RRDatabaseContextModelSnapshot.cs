// <auto-generated />
using System;
using DataAccessLogic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccessLogic.Migrations
{
    [DbContext(typeof(RRDatabaseContext))]
    partial class RRDatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("customer_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("customer_address");

                    b.Property<string>("Email")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("customer_email");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("customer_name");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("customer_password");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("customer_phone_number");

                    b.HasKey("Id");

                    b.ToTable("customer");
                });

            modelBuilder.Entity("Models.LineItem", b =>
                {
                    b.Property<int>("LineItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("line_item_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("line_item_quantity");

                    b.Property<int>("StorefrontId")
                        .HasColumnType("int")
                        .HasColumnName("storefront_id");

                    b.HasKey("LineItemId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("StorefrontId");

                    b.ToTable("line_item");
                });

            modelBuilder.Entity("Models.LineItemOrder", b =>
                {
                    b.Property<int>("LineItemOrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("line_item_order_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LineItemId")
                        .HasColumnType("int")
                        .HasColumnName("line_item_id");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.HasKey("LineItemOrderID");

                    b.HasIndex("LineItemId");

                    b.HasIndex("OrderId");

                    b.ToTable("line_item_order");
                });

            modelBuilder.Entity("Models.Order", b =>
                {
                    b.Property<int?>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("order_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<int?>("CustomerId1")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("LineItemId")
                        .HasColumnType("int");

                    b.Property<int>("LineItemOrderId")
                        .HasColumnType("int");

                    b.Property<string>("OrderStorelocation")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("order_storelocation");

                    b.Property<decimal?>("OrderTotalprice")
                        .HasColumnType("money")
                        .HasColumnName("order_totalprice");

                    b.Property<int?>("StoreFrontId")
                        .HasColumnType("int");

                    b.Property<string>("StoreLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StorefrontId")
                        .HasColumnType("int")
                        .HasColumnName("storefront_id");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderId")
                        .HasName("PK__order_pa__46596229F5810271");

                    b.HasIndex("CustomerId");

                    b.HasIndex("CustomerId1");

                    b.HasIndex("StoreFrontId");

                    b.HasIndex("StorefrontId");

                    b.ToTable("order_page");
                });

            modelBuilder.Entity("Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("product_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LineItemId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductCategory")
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("varchar(35)")
                        .HasColumnName("product_category");

                    b.Property<string>("ProductDescription")
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("varchar(35)")
                        .HasColumnName("product_description");

                    b.Property<string>("ProductName")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("product_name");

                    b.Property<decimal?>("ProductPrice")
                        .HasColumnType("money")
                        .HasColumnName("product_price");

                    b.Property<int?>("StoreFrontId")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("StoreFrontId");

                    b.ToTable("product");
                });

            modelBuilder.Entity("Models.StoreFront", b =>
                {
                    b.Property<int>("StoreFrontId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("storefront_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("storefront_address");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("storefront_name");

                    b.HasKey("StoreFrontId");

                    b.ToTable("storefront");
                });

            modelBuilder.Entity("Models.LineItem", b =>
                {
                    b.HasOne("Models.Order", null)
                        .WithMany("LineItem")
                        .HasForeignKey("OrderId");

                    b.HasOne("Models.Product", "Product")
                        .WithMany("LineItem")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK__line_item__produ__6477ECF3")
                        .IsRequired();

                    b.HasOne("Models.StoreFront", "Storefront")
                        .WithMany("LineItems")
                        .HasForeignKey("StorefrontId")
                        .HasConstraintName("FK__line_item__store__656C112C")
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Storefront");
                });

            modelBuilder.Entity("Models.LineItemOrder", b =>
                {
                    b.HasOne("Models.LineItem", "LineItem")
                        .WithMany("LineItemOrders")
                        .HasForeignKey("LineItemId")
                        .HasConstraintName("FK__line_item__line___6C190EBB")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Order", "Order")
                        .WithMany("LineItemOrders")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK__line_item__order__6D0D32F4")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LineItem");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Models.Order", b =>
                {
                    b.HasOne("Models.Customer", "Customer")
                        .WithMany("OrderPages")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__order_pag__custo__693CA210");

                    b.HasOne("Models.Customer", null)
                        .WithMany("ListOfOrders")
                        .HasForeignKey("CustomerId1");

                    b.HasOne("Models.StoreFront", null)
                        .WithMany("ListOfOrders")
                        .HasForeignKey("StoreFrontId");

                    b.HasOne("Models.StoreFront", "Storefront")
                        .WithMany("Order")
                        .HasForeignKey("StorefrontId")
                        .HasConstraintName("FK__order_pag__store__68487DD7");

                    b.Navigation("Customer");

                    b.Navigation("Storefront");
                });

            modelBuilder.Entity("Models.Product", b =>
                {
                    b.HasOne("Models.StoreFront", null)
                        .WithMany("ListOfProducts")
                        .HasForeignKey("StoreFrontId");
                });

            modelBuilder.Entity("Models.Customer", b =>
                {
                    b.Navigation("ListOfOrders");

                    b.Navigation("OrderPages");
                });

            modelBuilder.Entity("Models.LineItem", b =>
                {
                    b.Navigation("LineItemOrders");
                });

            modelBuilder.Entity("Models.Order", b =>
                {
                    b.Navigation("LineItem");

                    b.Navigation("LineItemOrders");
                });

            modelBuilder.Entity("Models.Product", b =>
                {
                    b.Navigation("LineItem");
                });

            modelBuilder.Entity("Models.StoreFront", b =>
                {
                    b.Navigation("LineItems");

                    b.Navigation("ListOfOrders");

                    b.Navigation("ListOfProducts");

                    b.Navigation("Order");
                });
#pragma warning restore 612, 618
        }
    }
}
